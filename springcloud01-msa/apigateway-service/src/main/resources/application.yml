server:
  port: 8000

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-uri:
      defaultZone: http://localhost:8761/eureka

spring:
  application:
    name: apigateway-service
  cloud:
    gateway:
      default-filters:
        - name: GlobalFilter # GlobalFilter.java
          args:
            baseMessage: Spring Cloud Gateway Global Filter
            preLogger: true
            postLogger: true
      routes:
        - id: first-service
#          uri: http://localhost:8081/ # 어디로 이동(forwarding)되는지
          uri: lb://MY-FIRST-SERVICE
          predicates: # 조건절 (사용자 요청이 들어오면 위의 uri로 보낸다)
            - Path=/first-service/**
          filters:
#            - AddRequestHeader=first-request, first-request-header2
#            - AddResponseHeader=first-response, first-response-header2
            - CustomFilter
        - id: second-service
#          uri: http://localhost:8082/
          uri: lb://MY-SECOND-SERVICE
          predicates:
            - Path=/second-service/**
            # 사용자가 요청을 하면 마이크로서비스에는 http://localhost:8082/second-service/** 식으로 요청이 된다.
            # 그래서 second-service 프로젝트에서 @RequestMapping("/second-service")를 추가해주어야 한다.
          filters:
#            - AddRequestHeader=second-request, second-request-header2
#            - AddResponseHeader=second-response, second-response-header2
            - name: CustomFilter
            - name: LoggingFilter # LoggingFilter.java, args를 주기위해서는 name 옵션을 써줘야한다.
              args:
                baseMessage: Hi, there.
                preLogger: true
                postLogger: true


