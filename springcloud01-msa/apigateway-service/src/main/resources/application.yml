server:
  port: 8000

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-uri:
      defaultZone: http://localhost:8761/eureka

spring:
  application:
    name: apigateway-service
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
  cloud:
    gateway:
      default-filters:
        - name: GlobalFilter # GlobalFilter.java
          args:
            baseMessage: Spring Cloud Gateway Global Filter
            preLogger: true
            postLogger: true
      routes:
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/login
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie # 요청 Header값 삭제, 매번 새로운 데이터로 인식하기 위함
            - RewritePath=/user-service/(?<segment>.*), /$\{segment} # /user-service/~로 들어오는 건 ~로 바꿔서 인식하기 위함.
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/users
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: user-service # Actuator 처리
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/actuator/**
            - Method=GET,POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/**
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
            - AuthorizationHeaderFilter # 로그인, 회원가입때는 인증 작업이 필요없다.
        - id: catalog-service
          uri: lb://CATALOG-SERVICE
          predicates:
            - Path=/catalog-service/**
        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order-service/**
        - id: first-service
#          uri: http://localhost:8081/ # 어디로 이동(forwarding)되는지
          uri: lb://MY-FIRST-SERVICE
          predicates: # 조건절 (사용자 요청이 들어오면 위의 uri로 보낸다)
            - Path=/first-service/**
          filters:
#            - AddRequestHeader=first-request, first-request-header2
#            - AddResponseHeader=first-response, first-response-header2
            - CustomFilter
        - id: second-service
#          uri: http://localhost:8082/
          uri: lb://MY-SECOND-SERVICE # Discovery Server에 등록한 Application으로 Forwarding 시켜준다.
          predicates:
            - Path=/second-service/**
            # 사용자가 요청을 하면 마이크로서비스에는 http://localhost:8082/second-service/** 식으로 요청이 된다.
            # 그래서 second-service 프로젝트에서 @RequestMapping("/second-service")를 추가해주어야 한다.
          filters:
#            - AddRequestHeader=second-request, second-request-header2
#            - AddResponseHeader=second-response, second-response-header2
            - name: CustomFilter
            - name: LoggingFilter # LoggingFilter.java, args를 주기위해서는 name 옵션을 써줘야한다.
              args:
                baseMessage: Hi, there.
                preLogger: true
                postLogger: true

#token:
#  secret: user_token

# actuator
management:
  endpoints:
    web:
      exposure:
        include: refresh,health,beans,httptrace,busrefresh,info,metrics,prometheus